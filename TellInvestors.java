/*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
  This code is generated by JAC version 5.6 by
  Agent Oriented Software. http://www.agent-software.com.au

    DO NOT ALTER THIS CODE AND DO NOT REMOVE THIS COMMENT
 *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*/
package stockMarket;
import aos.jack.jak.plan.Plan;
import aos.jack.jak.plan.PlanFSM;
import aos.jack.jak.plan.ExMap;
import aos.jack.jak.agent.NameSpace;
import aos.jack.jak.event.Event;
import aos.jack.jak.task.Task;
import aos.jack.jak.core.Generator;
import aos.jack.jak.logic.Signature;
import investor.MessageNewSharesAvailable;
import aos.jack.jak.cursor.Cursor;
import aos.jack.jak.fsm.FSM;
import aos.jack.jak.core.Jak;

/**
 * 
 */

public class TellInvestors extends aos.jack.jak.plan.Plan {
    aos.jack.jak.logic.StringVariable $name;
    public stockMarket.FindAndTellInvesters ev;
    public investor.MessageNewSharesAvailable nsaev;
    public stockMarket.investors investors;
    private static aos.jack.jak.plan.ExMap[] __exMap_body;
    private static java.lang.String[] __tt__body = {
            "stockMarket/TellInvestors.plan",
            "body",
            "36",
            "38",
            "39",
            "40",
            "41",
            "33",
            "33"};
    private final static java.lang.String[] __planVariableNames = {
            "$name",
            "ev",
            "nsaev",
            "investors"};
    private final static java.lang.String[] __planVariableTypes = {
            "aos.jack.jak.logic.StringVariable",
            "stockMarket.FindAndTellInvesters",
            "investor.MessageNewSharesAvailable",
            "investors"};
    private final static java.lang.String[] __reasoningMethods = {
            "body"};
    private final static java.lang.String[] __logSignatureVariableNames = {
            "$name"};
    private final static java.lang.String[] __logSignatureVariableTypes = {
            "aos.jack.jak.logic.StringVariable"};
    private final static java.lang.String[] __fsmVariableNames_body = {
            "indication"};
    private final static java.lang.String[] __fsmTypes_body = {
            "MessageNewSharesAvailable"};
    private final static java.lang.String[] __fsmLocalNames_body = {
            "__local__16_0"};
    static boolean relevant(stockMarket.FindAndTellInvesters ev)
    {
        return true;
    }
    
    public java.lang.String getDocumentation()
    {
        return "/**\n * \n */\n";
    }
    
    public TellInvestors()
    {
    }
    
    private TellInvestors(aos.jack.jak.task.Task __t, stockMarket.TellInvestors __env)
    {
        __agent = __env.__agent;
        __ns = __env.__ns;
        __planTask = __t;
        __logic = __t.logic;
        ev = __env.ev;
        nsaev = __env.nsaev;
        investors = __env.investors;
        $name = (aos.jack.jak.logic.StringVariable) __logic.new_variable(java.lang.String.class);
    }
    
    public boolean init_sentinel(aos.jack.jak.agent.NameSpace __a)
    {
        ev = (stockMarket.FindAndTellInvesters) __a.findEvent("stockMarket.FindAndTellInvesters");
        if (ev == null) {
            warning("Failed to find FindAndTellInvesters ev");
            return false;
        }
        nsaev = (investor.MessageNewSharesAvailable) __a.findEvent("investor.MessageNewSharesAvailable");
        if (nsaev == null) {
            warning("Failed to find MessageNewSharesAvailable nsaev");
            return false;
        }
        investors = (stockMarket.investors) lookupNamedObject("investors","stockMarket.investors",0);
        if (investors == null) {
            warning("Failed to find investors investors");
            return false;
        }
        return true;
    }
    
    public aos.jack.jak.plan.Plan freeze()
    {
        return this;
    }
    
    public aos.jack.jak.plan.Plan unfreeze()
    {
        return this;
    }
    
    public java.lang.Object genObject(int __index)
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal Object Construction");
        return null;
    }
    
    public aos.jack.jak.cursor.Cursor genCursor(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
            case 0: 
            {
                return (investors.getNames($name));
            }
        }
        aos.jack.jak.core.Jak.error("illegal Cursor Construction");
        return null;
    }
    
    public aos.jack.jak.fsm.FSM genFSM(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal FSM Construction");
        return null;
    }
    
    public boolean testCondition(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal test Construction");
        return false;
    }
    
    public aos.jack.jak.plan.PlanFSM body()
    {
        return new stockMarket.TellInvestors.__bodyFSM();
    }
    
    private TellInvestors(stockMarket.FindAndTellInvesters __ev, aos.jack.jak.task.Task __t, stockMarket.TellInvestors __env)
    {
        this(__t,__env);
        this.ev = __ev;
    }
    
    protected aos.jack.jak.logic.Signature eventSignature(int __log)
    {
        return ev.getSignature(__log);
    }
    
    public java.lang.String handledEvent()
    {
        return "stockMarket.FindAndTellInvesters";
    }
    
    public boolean __relevant(aos.jack.jak.event.Event __e)
    {
        return __ns.isEnabled() && relevant(((stockMarket.FindAndTellInvesters) __e));
    }
    
    public aos.jack.jak.plan.Plan createPlan(aos.jack.jak.event.Event __e, aos.jack.jak.task.Task __t)
    {
        if (!(__e instanceof stockMarket.FindAndTellInvesters)) 
            return null;
        stockMarket.FindAndTellInvesters __e1 = (stockMarket.FindAndTellInvesters) __e;
        return new stockMarket.TellInvestors(__e1,__t,this);
    }
    
    protected aos.jack.jak.logic.Signature initSignature(int __log)
    {
        aos.jack.jak.logic.Signature __s = super.initSignature(__log + 1);
        __s.addLogical($name);
        return __s;
    }
    
    public void setFromSignature(aos.jack.jak.logic.Signature __s)
    {
        super.setFromSignature(__s);
        $name = (aos.jack.jak.logic.StringVariable) __s.getLogical();
    }
    
    public java.lang.String[] variableNames()
    {
        return __planVariableNames;
    }
    
    public java.lang.String[] variableTypes()
    {
        return __planVariableTypes;
    }
    
    public java.lang.Object getVariable(int n)
    {
        switch (n) {
            case 0: 
            {
                return aos.util.ToObject.box($name);
            }
            case 1: 
            {
                return aos.util.ToObject.box(ev);
            }
            case 2: 
            {
                return aos.util.ToObject.box(nsaev);
            }
            case 3: 
            {
                return aos.util.ToObject.box(investors);
            }
            default: 
            {
                throw new java.lang.IndexOutOfBoundsException("Plan " + this + " does not have variable number " + n);
            }
        }
    }
    
    public java.lang.String[] reasoningMethods()
    {
        return mergeReasoningMethods(__reasoningMethods,super.reasoningMethods());
    }
    
    public java.lang.String[] logSignatureVariableNames()
    {
        return __logSignatureVariableNames;
    }
    
    public java.lang.String[] logSignatureVariableTypes()
    {
        return __logSignatureVariableTypes;
    }
    
    public aos.jack.jak.cursor.Cursor context()
    {
        try {
            return (genCursor(0));
        }
        catch (java.lang.Exception e) {
            e.printStackTrace();
            return aos.jack.jak.cursor.Cursor.falseCursor;
        }
    }
    
    class __bodyFSM extends aos.jack.jak.plan.PlanFSM implements aos.jack.jak.core.Generator {
        investor.MessageNewSharesAvailable __local__16_0;
        private int __breakLevel = 0;
        public int run(int __status)
            throws java.lang.Throwable
        {
            do {
                try {
                    if (__tothrow != null) 
                        throw __tothrow;
                    if ((aos.jack.jak.core.Jak.debugging & aos.jack.jak.core.Jak.LOG_PLANS) != 0) 
                        aos.util.logging.LogMsg.log(this,aos.jack.jak.core.Jak.LOG_PLANS,__task + "-TellInvestors.body:" + java.lang.Integer.toString(__state));
                    if (__task.nsteps > 0) {
                        __task.nsteps-- ;
                        if (__task.nsteps == 0) 
                            agent.changeFocus();
                    }
                    if (__state < 10) {
                        __status = super.stdrun(stockMarket.TellInvestors.this,__status);
                        if (__status != CONTINUE || agent.changing_focus) 
                            return __status;
                        continue;
                    }
                    __curstate = __state;
                    switch (__state) {
                        default: 
                        {
                            aos.jack.jak.core.Jak.error("TellInvestors.body: Illegal state");
                            return FAILED_STATE;
                        }
                        //* (36)         if(ev.buyer==null)
                        case 10: 
                        {
                            __breakLevel = 0;
                            if (ev.buyer == null) 
                                __state = 11;
                             else 
                                __state = 15;
                            break;
                        }
                        //* (38)         System.out.println("sending messages to "+$name.getValue());
                        case 11: 
                        {
                            __breakLevel = 2;
                            __state = 12;
                            java.lang.System.out.println("sending messages to " + $name.getValue());
                            break;
                        }
                        //* (39)         MessageNewSharesAvailable indication = nsaev.generateNewSharesAvailableMessage(ev.company,ev.price,ev.numberOfShares,ev.seller);
                        case 12: 
                        {
                            __local__16_0 = nsaev.generateNewSharesAvailableMessage(ev.company,ev.price,ev.numberOfShares,ev.seller);
                            __state = 13;
                            break;
                        }
                        //* (40)         @send($name.getValue(),indication);
                        case 13: 
                        {
                            __state = 14;
                            agent.send($name.getValue(),__local__16_0);
                            break;
                        }
                        //* (41)         System.out.println("ela ela");
                        case 14: 
                        {
                            __state = 16;
                            java.lang.System.out.println("ela ela");
                            break;
                        }
                        //* (33)     #reasoning method
                        case 15: 
                        {
                            __breakLevel = 2;
                            __state = 16;
                            break;
                        }
                        //* (33)     #reasoning method
                        case 16: 
                        {
                            if (__pending == null) 
                                __state = PASSED_STATE;
                            __tothrow = __pending;
                            break;
                        }
                    }
                }
                catch (java.lang.Throwable e) {
                    handleException(e,__exMap_body);
                }
            }
             while (!agent.changing_focus);
            return CONTINUE;
        }
        
        public java.lang.String methodName()
        {
            return "body";
        }
        
        __bodyFSM()
        {
        }
        
        public java.lang.String stateInfo()
        {
            int n = __curstate;
            java.lang.String file = __tt__body[0];
            java.lang.String method = __tt__body[1];
            if (n < 0) 
                n = -n;
            n -= (10 - 2);
            java.lang.String line = (n < 2)?"??":__tt__body[n];
            return file + ":" + line + " " + method + " [" + __curstate + "]";
        }
        
        public java.lang.Object genObject(int __index)
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal Object Construction");
            return null;
        }
        
        public aos.jack.jak.cursor.Cursor genCursor(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal Cursor Construction");
            return null;
        }
        
        public aos.jack.jak.fsm.FSM genFSM(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal FSM Construction");
            return null;
        }
        
        public boolean testCondition(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal test Construction");
            return false;
        }
        
        public aos.jack.jak.plan.Plan getPlan()
        {
            return stockMarket.TellInvestors.this;
        }
        
        protected aos.jack.jak.fsm.FSM fail()
        {
            return getPlan().fail();
        }
        
        protected aos.jack.jak.fsm.FSM pass()
        {
            return getPlan().pass();
        }
        
        public void enter()
        {
            __trace = agent.trace("stockMarket.TellInvestors.body");
        }
        
        public java.lang.Object getVariable(int n)
        {
            switch (n) {
                case 0: 
                {
                    return aos.util.ToObject.box(__local__16_0);
                }
                default: 
                {
                    throw new java.lang.IndexOutOfBoundsException("Reasoning Method " + methodName() + " does not have variable number " + n);
                }
            }
        }
        
        public java.lang.String[] variableNames()
        {
            return __fsmVariableNames_body;
        }
        
        public java.lang.String[] variableTypes()
        {
            return __fsmTypes_body;
        }
        
        public java.lang.String[] variableLocalNames()
        {
            return __fsmLocalNames_body;
        }
        
    }
}
