

/*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
  This code is generated by JAC version 5.6 by
  Agent Oriented Software. http://www.agent-software.com.au

    DO NOT ALTER THIS CODE AND DO NOT REMOVE THIS COMMENT
 *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*/
package stockMarket;
import aos.jack.jak.beliefset.OpenWorld;
import aos.jack.jak.beliefset.Tuple;

/** Automatically generated class from 'null'. */
public class PublicCompaniesInMarket__Tuple extends aos.jack.jak.beliefset.Tuple implements aos.apib.Base, java.io.Serializable {

  public static final __SS streamer = new __SS();

  /** Automatically generated method. */
  public aos.apib.StreamerSupport getStreamer()
    { return streamer; }

  /** Automatically generated method. */
  public int hashCode() {
     streamer.setup();
     return aos.apib.Util.hashCode(this);
  }

  /** Automatically generated method. */
  public boolean equals(Object o) {
     if (!(o instanceof aos.apib.Base)) return false;
     return aos.apib.Util.equals(this, (aos.apib.Base)o);
  }

  public String	companyName;
  public int	numShares;
  public float	sharePrice;
  public float	percentageOfTotCompany;
  public float	netIncome;


public PublicCompaniesInMarket__Tuple(boolean v)
{
    super();
    isFree = v;
}



public java.lang.String name()
{
    return "PublicCompaniesInMarket__Tuple";
}



public java.lang.String toString()
{
    java.lang.StringBuffer __s = new java.lang.StringBuffer();
    __s.append(companyName);
    __s.append(":");
    __s.append(numShares);
    __s.append(":");
    __s.append(sharePrice);
    __s.append(":");
    __s.append(percentageOfTotCompany);
    __s.append(":");
    __s.append(netIncome);
    return __s.toString();
}



public int hash(int __i)
{
    int __r = 0;
    switch (__i) {
        case 0: 
        {
            __r ^= (companyName.hashCode() & (~(1 << 31)));
            return __r;
        }
    }
    return 0;
}


  /** Automatically generated constructor. */
  public PublicCompaniesInMarket__Tuple() {
    streamer.setup();
    if (!getStreamer().initialized) return;
    __init__PublicCompaniesInMarket__Tuple();
  }

  /** Automatically generated method. */
  void __init__PublicCompaniesInMarket__Tuple() {
	companyName = null;
	numShares = 0;
	sharePrice = (float) 0;
	percentageOfTotCompany = (float) 0;
	netIncome = (float) 0;

  }

  /** Automatically generated JACOB streamer class */
  static class __SS extends aos.apib.StreamerSupport {
    PublicCompaniesInMarket__Tuple __def = null;

    /** Return a static instance. */

    public aos.apib.Base getDefaultInstance() { return __def; }

    private String[] fn = {
    ":companyName",
    ":numShares",
    ":sharePrice",
    ":percentageOfTotCompany",
    ":netIncome",
    };

    private String[] dn = {
    ":companyName",
    ":numShares",
    ":sharePrice",
    ":percentageOfTotCompany",
    ":netIncome",
    };

    private boolean[] ftr = {
    false,
    false,
    false,
    false,
    false,
    };

    private boolean[] fst = {
    false,
    false,
    false,
    false,
    false,
    };

    private boolean[] fhd = {
    false,
    false,
    false,
    false,
    false,
    };

    private int[] ft = {
    11,
    3,
    6,
    6,
    6,
    };

    private aos.apib.EnumInfo[] fe = {
	null,
	null,
	null,
	null,
	null,
    };

    private String[] cm = {
    null,
    null,
    null,
    null,
    null,
    };


    private aos.apib.StreamerSupport[][] al = {
	null,
	null,
	null,
	null,
	null,
    };

    private String[] fsubt = {
    null, 
    null, 
    null, 
    null, 
    null, 
    };

    /** Construct the streamer. */
    public __SS() {
      __type = "PublicCompaniesInMarket__Tuple";
      __icon = null;
      __comment = "Auto generated by the JACK Agents Compiler";
      __field_names = fn;
      __display_names = dn;
      __field_types = ft;
      __field_static = fst;
      __field_hidden = fhd;
      __field_transient = ftr;
      __field_subtypes = fsubt;
      __field_comments = cm;
      __enuminfos = fe;
      __allowed = al;
      register(__type, this);
    }

    private boolean setup_done = false;

    /** Initialization. */
    protected void setup() {
      if ( setup_done ) return;

      setup_done = true; 

      __def = (PublicCompaniesInMarket__Tuple)newInstance();
      setStreamedType(__def.getClass());
      baseclasses = findBaseStreamer(__def.getClass());
    }

    /** Initialization. */
    protected void init() {
      setup();
      __def.__init__PublicCompaniesInMarket__Tuple();
    }

    /** JACOB method. */
    public boolean isDummy() { return false; }

    /** JACOB method. */
    public aos.apib.Base new_instance() {
      return new PublicCompaniesInMarket__Tuple();
    }

    /** JACOB method. */
    public aos.apib.Base[] new_array(int n) {
      return new PublicCompaniesInMarket__Tuple[n];
    }

    /** JACOB class reading method. */
    public boolean read(aos.apib.InStream in, aos.apib.Base o) {
      int i = -1;
      while ((i = in.nextField(i, this)) >= 0) {
        if ( !readField( in, o, i ) ) {
          return false;
        }
      }
      return true;
    }

    /** JACOB method to read fields. */
    public boolean readField(aos.apib.InStream in, aos.apib.Base o,int i) {
      if ( i > __field_names.length )
        return getBaseClassStreamer().readField( in, o, i - __field_names.length - 1 );
      PublicCompaniesInMarket__Tuple v = (PublicCompaniesInMarket__Tuple)o;
      switch (i) {
      case 0:
	v.companyName = in.getString(true);
	break;
   case 1:
	v.numShares = in.getInt();
	break;
   case 2:
	v.sharePrice = in.getFloat();
	break;
   case 3:
	v.percentageOfTotCompany = in.getFloat();
	break;
   case 4:
	v.netIncome = in.getFloat();
	break;
      case 5:
        in.readBaseClasses(o, this, 0);
        break;
      default:
        if (i >= 0 && i <= 5) break;
        in.error("Reader for PublicCompaniesInMarket__Tuple: illegal field number:"+i);
        return false;
      }
      return true;
    }

    /** JACOB class writing method. */
    public boolean write(aos.apib.OutStream out, aos.apib.Base o) {
      PublicCompaniesInMarket__Tuple v = (PublicCompaniesInMarket__Tuple)o;
      int i = -1;
      while ((i = out.nextField(i, this)) >= 0) {
        switch (i) {
      case 0:
	out.putString(v.companyName, i, __def.companyName, this);
	break;
   case 1:
	out.putInt(v.numShares, i, __def.numShares, this);
	break;
   case 2:
	out.putFloat(v.sharePrice, i, __def.sharePrice, this);
	break;
   case 3:
	out.putFloat(v.percentageOfTotCompany, i, __def.percentageOfTotCompany, this);
	break;
   case 4:
	out.putFloat(v.netIncome, i, __def.netIncome, this);
	break;
        case 5:
          out.writeBaseClasses(o, this);
          break;
        default:
          if (i >= 0 && i <= 5) break;
          out.error("Writer for PublicCompaniesInMarket__Tuple: illegal field number:"+i);
          return false;
        }
      }
      return true;
    }

    /** JACOB method. */
    public boolean isDefault(aos.apib.Base o) {
      PublicCompaniesInMarket__Tuple v = (PublicCompaniesInMarket__Tuple)o;

	if (v.companyName != __def.companyName) {
	   if (v.companyName == null) return false;
	   if (__def.companyName == null) return false;
	   if (!v.companyName.equals(__def.companyName)) return false;
	}
	if (v.numShares != __def.numShares) return false;
	if (v.sharePrice != __def.sharePrice) return false;
	if (v.percentageOfTotCompany != __def.percentageOfTotCompany) return false;
	if (v.netIncome != __def.netIncome) return false;
      if (baseclasses != null && baseclasses.length == 1)
        return baseclasses[0].isDefault(o);
      return true;
    }

    /** JACOB method. */
    public void findNonApib(aos.apib.OutStream out, aos.apib.Base o) {
     PublicCompaniesInMarket__Tuple v = (PublicCompaniesInMarket__Tuple)o;

      if (baseclasses != null && baseclasses.length == 1)
        baseclasses[0].findNonApib(out, o);
    }
  }

}

