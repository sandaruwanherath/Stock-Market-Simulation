/*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
  This code is generated by JAC version 5.6 by
  Agent Oriented Software. http://www.agent-software.com.au

    DO NOT ALTER THIS CODE AND DO NOT REMOVE THIS COMMENT
 *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*/
package stockMarket;
import aos.jack.jak.plan.Plan;
import aos.jack.jak.plan.PlanFSM;
import aos.jack.jak.plan.ExMap;
import aos.jack.jak.agent.NameSpace;
import aos.jack.jak.event.Event;
import aos.jack.jak.task.Task;
import aos.jack.jak.core.Generator;
import aos.jack.jak.logic.Signature;
import investor.MessageFinished;
import aos.jack.util.thread.Semaphore;
import java.lang.Object;
import aos.jack.jak.cursor.Cursor;
import aos.jack.jak.fsm.FSM;
import aos.jack.jak.core.Jak;

/**
the plan the market agent uses to handle a messagebuy event sent by an invester agent
*/

public class ProcessRequestPlan extends aos.jack.jak.plan.Plan {
    aos.jack.jak.logic.IntegerVariable $price;
    aos.jack.jak.logic.IntegerVariable $shares;
    public stockMarket.MessageBuy ev;
    public investor.MessageFinished fev;
    public aos.jack.util.thread.Semaphore mutex;
    public stockMarket.OrderBook sharesToSell;
    private static aos.jack.jak.plan.ExMap[] __exMap_body = {
            new aos.jack.jak.plan.ExMap(12,16,17,null)};
    private static java.lang.String[] __tt__body = {
            "stockMarket/ProcessRequestPlan.plan",
            "body",
            "39",
            "40",
            "44",
            "45",
            "46",
            "47",
            "49",
            "51",
            "51",
            "36"};
    private static aos.jack.jak.plan.ExMap[] __exMap_fail;
    private static java.lang.String[] __tt__fail = {
            "stockMarket/ProcessRequestPlan.plan",
            "fail",
            "57",
            "58",
            "59",
            "54"};
    private final static java.lang.String[] __planVariableNames = {
            "$price",
            "$shares",
            "ev",
            "fev",
            "mutex",
            "sharesToSell"};
    private final static java.lang.String[] __planVariableTypes = {
            "aos.jack.jak.logic.IntegerVariable",
            "aos.jack.jak.logic.IntegerVariable",
            "stockMarket.MessageBuy",
            "MessageFinished",
            "aos.jack.util.thread.Semaphore",
            "stockMarket.OrderBook"};
    private final static java.lang.String[] __reasoningMethods = {
            "body",
            "fail"};
    private final static java.lang.String[] __logSignatureVariableNames = {
            "$price",
            "$shares"};
    private final static java.lang.String[] __logSignatureVariableTypes = {
            "aos.jack.jak.logic.IntegerVariable",
            "aos.jack.jak.logic.IntegerVariable"};
    static boolean relevant(stockMarket.MessageBuy ev)
    {
        return true;
    }
    
    public java.lang.String getDocumentation()
    {
        return "/**\nthe plan the market agent uses to handle a messagebuy event sent by an invester agent\n*/\n";
    }
    
    public ProcessRequestPlan()
    {
    }
    
    private ProcessRequestPlan(aos.jack.jak.task.Task __t, stockMarket.ProcessRequestPlan __env)
    {
        __agent = __env.__agent;
        __ns = __env.__ns;
        __planTask = __t;
        __logic = __t.logic;
        ev = __env.ev;
        fev = __env.fev;
        mutex = __env.mutex;
        sharesToSell = __env.sharesToSell;
        $price = (aos.jack.jak.logic.IntegerVariable) __logic.new_variable(java.lang.Integer.TYPE);
        $shares = (aos.jack.jak.logic.IntegerVariable) __logic.new_variable(java.lang.Integer.TYPE);
    }
    
    public boolean init_sentinel(aos.jack.jak.agent.NameSpace __a)
    {
        ev = (stockMarket.MessageBuy) __a.findEvent("stockMarket.MessageBuy");
        if (ev == null) {
            warning("Failed to find MessageBuy ev");
            return false;
        }
        fev = (investor.MessageFinished) __a.findEvent("investor.MessageFinished");
        if (fev == null) {
            warning("Failed to find MessageFinished fev");
            return false;
        }
        mutex = (aos.jack.util.thread.Semaphore) lookupNamedObject("mutex","aos.jack.util.thread.Semaphore",0);
        if (mutex == null) {
            warning("Failed to find Semaphore mutex");
            return false;
        }
        sharesToSell = (stockMarket.OrderBook) lookupNamedObject("sharesToSell","stockMarket.OrderBook",0);
        if (sharesToSell == null) {
            warning("Failed to find OrderBook sharesToSell");
            return false;
        }
        return true;
    }
    
    public aos.jack.jak.plan.Plan freeze()
    {
        return this;
    }
    
    public aos.jack.jak.plan.Plan unfreeze()
    {
        return this;
    }
    
    public java.lang.Object genObject(int __index)
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal Object Construction");
        return null;
    }
    
    public aos.jack.jak.cursor.Cursor genCursor(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal Cursor Construction");
        return null;
    }
    
    public aos.jack.jak.fsm.FSM genFSM(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal FSM Construction");
        return null;
    }
    
    public boolean testCondition(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal test Construction");
        return false;
    }
    
    public aos.jack.jak.plan.PlanFSM body()
    {
        return new stockMarket.ProcessRequestPlan.__bodyFSM();
    }
    
    public aos.jack.jak.plan.PlanFSM fail()
    {
        return new stockMarket.ProcessRequestPlan.__failFSM();
    }
    
    private ProcessRequestPlan(stockMarket.MessageBuy __ev, aos.jack.jak.task.Task __t, stockMarket.ProcessRequestPlan __env)
    {
        this(__t,__env);
        this.ev = __ev;
    }
    
    protected aos.jack.jak.logic.Signature eventSignature(int __log)
    {
        return ev.getSignature(__log);
    }
    
    public java.lang.String handledEvent()
    {
        return "stockMarket.MessageBuy";
    }
    
    public boolean __relevant(aos.jack.jak.event.Event __e)
    {
        return __ns.isEnabled() && relevant(((stockMarket.MessageBuy) __e));
    }
    
    public aos.jack.jak.plan.Plan createPlan(aos.jack.jak.event.Event __e, aos.jack.jak.task.Task __t)
    {
        if (!(__e instanceof stockMarket.MessageBuy)) 
            return null;
        stockMarket.MessageBuy __e1 = (stockMarket.MessageBuy) __e;
        return new stockMarket.ProcessRequestPlan(__e1,__t,this);
    }
    
    protected aos.jack.jak.logic.Signature initSignature(int __log)
    {
        aos.jack.jak.logic.Signature __s = super.initSignature(__log + 2);
        __s.addLogical($price);
        __s.addLogical($shares);
        return __s;
    }
    
    public void setFromSignature(aos.jack.jak.logic.Signature __s)
    {
        super.setFromSignature(__s);
        $price = (aos.jack.jak.logic.IntegerVariable) __s.getLogical();
        $shares = (aos.jack.jak.logic.IntegerVariable) __s.getLogical();
    }
    
    public java.lang.String[] variableNames()
    {
        return __planVariableNames;
    }
    
    public java.lang.String[] variableTypes()
    {
        return __planVariableTypes;
    }
    
    public java.lang.Object getVariable(int n)
    {
        switch (n) {
            case 0: 
            {
                return aos.util.ToObject.box($price);
            }
            case 1: 
            {
                return aos.util.ToObject.box($shares);
            }
            case 2: 
            {
                return aos.util.ToObject.box(ev);
            }
            case 3: 
            {
                return aos.util.ToObject.box(fev);
            }
            case 4: 
            {
                return aos.util.ToObject.box(mutex);
            }
            case 5: 
            {
                return aos.util.ToObject.box(sharesToSell);
            }
            default: 
            {
                throw new java.lang.IndexOutOfBoundsException("Plan " + this + " does not have variable number " + n);
            }
        }
    }
    
    public java.lang.String[] reasoningMethods()
    {
        return mergeReasoningMethods(__reasoningMethods,super.reasoningMethods());
    }
    
    public java.lang.String[] logSignatureVariableNames()
    {
        return __logSignatureVariableNames;
    }
    
    public java.lang.String[] logSignatureVariableTypes()
    {
        return __logSignatureVariableTypes;
    }
    
    public aos.jack.jak.cursor.Cursor context()
    {
        try {
            return (((true)?aos.jack.jak.cursor.Cursor.trueCursor:aos.jack.jak.cursor.Cursor.falseCursor));
        }
        catch (java.lang.Exception e) {
            e.printStackTrace();
            return aos.jack.jak.cursor.Cursor.falseCursor;
        }
    }
    
    class __bodyFSM extends aos.jack.jak.plan.PlanFSM implements aos.jack.jak.core.Generator {
        private int __breakLevel = 0;
        public int run(int __status)
            throws java.lang.Throwable
        {
            do {
                try {
                    if (__tothrow != null) 
                        throw __tothrow;
                    if ((aos.jack.jak.core.Jak.debugging & aos.jack.jak.core.Jak.LOG_PLANS) != 0) 
                        aos.util.logging.LogMsg.log(this,aos.jack.jak.core.Jak.LOG_PLANS,__task + "-ProcessRequestPlan.body:" + java.lang.Integer.toString(__state));
                    if (__task.nsteps > 0) {
                        __task.nsteps-- ;
                        if (__task.nsteps == 0) 
                            agent.changeFocus();
                    }
                    if (__state < 10) {
                        __status = super.stdrun(stockMarket.ProcessRequestPlan.this,__status);
                        if (__status != CONTINUE || agent.changing_focus) 
                            return __status;
                        continue;
                    }
                    __curstate = __state;
                    switch (__state) {
                        default: 
                        {
                            aos.jack.jak.core.Jak.error("ProcessRequestPlan.body: Illegal state");
                            return FAILED_STATE;
                        }
                        //* (39)         System.out.println("waiting for mutex");
                        case 10: 
                        {
                            __breakLevel = 0;
                            __state = 11;
                            java.lang.System.out.println("waiting for mutex");
                            break;
                        }
                        //* (40)         @waitFor(mutex.planWait());
                        case 11: 
                        {
                            __task.push(new aos.jack.jak.fsm.WaitForFSM(getAgent(),__task,this,0));
                            __state = -__state;
                            __subtask_pass = 12;
                            __subtask_fail = 4;
                            return SUBTASK;
                        }
                        //* (44)             sharesToSell.getDetails(ev.company,$price,$shares);
                        case 12: 
                        {
                            __breakLevel = 2;
                            boolean __b;
                            aos.jack.jak.cursor.Cursor __c = null;
                            try {
                                __c = genCursor(1);
                                __b = __c.next();
                            }
                            finally {
                                if (__c != null) 
                                    __c.finished();
                            }
                            if (__b) 
                                __state = 13;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (45)             sharesToSell.remove(ev.company,$price.getValue(),$shares.getValue());
                        case 13: 
                        {
                            __state = 14;
                            sharesToSell.remove(ev.company,$price.getValue(),$shares.getValue());
                            break;
                        }
                        //* (46)             @sleep(1);
                        case 14: 
                        {
                            __task.push(new aos.jack.jak.fsm.WaitForFSM(getAgent(),__task,this,2));
                            __state = -__state;
                            __subtask_pass = 15;
                            __subtask_fail = 4;
                            return SUBTASK;
                        }
                        //* (47)             @send(ev.from,fev.finished("sold! ",$price.getValue()*ev.amountOfShares)); 
                        case 15: 
                        {
                            __state = 16;
                            agent.send(ev.from,fev.finished("sold! ",$price.getValue() * ev.amountOfShares));
                            break;
                        }
                        //* (49)             System.out.println("sold!");
                        case 16: 
                        {
                            __state = 17;
                            java.lang.System.out.println("sold!");
                            break;
                        }
                        //* (51)     finally{mutex.signal();}
                        case 17: 
                        {
                            __breakLevel = 2;
                            __state = 18;
                            mutex.signal();
                            break;
                        }
                        //* (51)     finally{mutex.signal();}
                        case 18: 
                        {
                            __state = 19;
                            if (__breakLevel < 2) 
                                __state = 19;
                            __tothrow = __pending;
                            break;
                        }
                        //* (36)     #reasoning method
                        case 19: 
                        {
                            if (__pending == null) 
                                __state = PASSED_STATE;
                            __tothrow = __pending;
                            break;
                        }
                    }
                }
                catch (java.lang.Throwable e) {
                    handleException(e,__exMap_body);
                }
            }
             while (!agent.changing_focus);
            return CONTINUE;
        }
        
        public java.lang.String methodName()
        {
            return "body";
        }
        
        __bodyFSM()
        {
        }
        
        public java.lang.String stateInfo()
        {
            int n = __curstate;
            java.lang.String file = __tt__body[0];
            java.lang.String method = __tt__body[1];
            if (n < 0) 
                n = -n;
            n -= (10 - 2);
            java.lang.String line = (n < 2)?"??":__tt__body[n];
            return file + ":" + line + " " + method + " [" + __curstate + "]";
        }
        
        public java.lang.Object genObject(int __index)
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal Object Construction");
            return null;
        }
        
        public aos.jack.jak.cursor.Cursor genCursor(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
                case 0: 
                {
                    return (mutex.planWait());
                }
                case 1: 
                {
                    return (sharesToSell.getDetails(ev.company,$price,$shares));
                }
                case 2: 
                {
                    return (elapsedMillis((long) (1000 * (1))));
                }
            }
            aos.jack.jak.core.Jak.error("illegal Cursor Construction");
            return null;
        }
        
        public aos.jack.jak.fsm.FSM genFSM(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal FSM Construction");
            return null;
        }
        
        public boolean testCondition(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal test Construction");
            return false;
        }
        
        public aos.jack.jak.plan.Plan getPlan()
        {
            return stockMarket.ProcessRequestPlan.this;
        }
        
        protected aos.jack.jak.fsm.FSM fail()
        {
            return getPlan().fail();
        }
        
        protected aos.jack.jak.fsm.FSM pass()
        {
            return getPlan().pass();
        }
        
        public void enter()
        {
            __trace = agent.trace("stockMarket.ProcessRequestPlan.body");
        }
        
    }
    class __failFSM extends aos.jack.jak.plan.PlanFSM implements aos.jack.jak.core.Generator {
        private int __breakLevel = 0;
        public int run(int __status)
            throws java.lang.Throwable
        {
            do {
                try {
                    if (__tothrow != null) 
                        throw __tothrow;
                    if ((aos.jack.jak.core.Jak.debugging & aos.jack.jak.core.Jak.LOG_PLANS) != 0) 
                        aos.util.logging.LogMsg.log(this,aos.jack.jak.core.Jak.LOG_PLANS,__task + "-ProcessRequestPlan.fail:" + java.lang.Integer.toString(__state));
                    if (__task.nsteps > 0) {
                        __task.nsteps-- ;
                        if (__task.nsteps == 0) 
                            agent.changeFocus();
                    }
                    if (__state < 10) {
                        __status = super.stdrun(stockMarket.ProcessRequestPlan.this,__status);
                        if (__status != CONTINUE || agent.changing_focus) 
                            return __status;
                        continue;
                    }
                    __curstate = __state;
                    switch (__state) {
                        default: 
                        {
                            aos.jack.jak.core.Jak.error("ProcessRequestPlan.fail: Illegal state");
                            return FAILED_STATE;
                        }
                        //* (57)         @sleep(5);
                        case 10: 
                        {
                            __breakLevel = 0;
                            __task.push(new aos.jack.jak.fsm.WaitForFSM(getAgent(),__task,this,0));
                            __state = -__state;
                            __subtask_pass = 11;
                            __subtask_fail = 4;
                            return SUBTASK;
                        }
                        //* (58)         @send(ev.from,fev.finished("sorry! can't sell ",0));
                        case 11: 
                        {
                            __state = 12;
                            agent.send(ev.from,fev.finished("sorry! can\'t sell ",0));
                            break;
                        }
                        //* (59)         System.out.println("sorry!");
                        case 12: 
                        {
                            __state = 13;
                            java.lang.System.out.println("sorry!");
                            break;
                        }
                        //* (54)     #reasoning method
                        case 13: 
                        {
                            if (__pending == null) 
                                __state = PASSED_STATE;
                            __tothrow = __pending;
                            break;
                        }
                    }
                }
                catch (java.lang.Throwable e) {
                    handleException(e,__exMap_fail);
                }
            }
             while (!agent.changing_focus);
            return CONTINUE;
        }
        
        public java.lang.String methodName()
        {
            return "fail";
        }
        
        __failFSM()
        {
        }
        
        public java.lang.String stateInfo()
        {
            int n = __curstate;
            java.lang.String file = __tt__fail[0];
            java.lang.String method = __tt__fail[1];
            if (n < 0) 
                n = -n;
            n -= (10 - 2);
            java.lang.String line = (n < 2)?"??":__tt__fail[n];
            return file + ":" + line + " " + method + " [" + __curstate + "]";
        }
        
        public java.lang.Object genObject(int __index)
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal Object Construction");
            return null;
        }
        
        public aos.jack.jak.cursor.Cursor genCursor(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
                case 0: 
                {
                    return (elapsedMillis((long) (1000 * (5))));
                }
            }
            aos.jack.jak.core.Jak.error("illegal Cursor Construction");
            return null;
        }
        
        public aos.jack.jak.fsm.FSM genFSM(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal FSM Construction");
            return null;
        }
        
        public boolean testCondition(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal test Construction");
            return false;
        }
        
        public aos.jack.jak.plan.Plan getPlan()
        {
            return stockMarket.ProcessRequestPlan.this;
        }
        
        public void enter()
        {
            __trace = agent.trace("stockMarket.ProcessRequestPlan.fail");
        }
        
    }
}
